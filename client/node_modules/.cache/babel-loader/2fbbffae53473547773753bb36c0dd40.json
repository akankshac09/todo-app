{"ast":null,"code":"import _defineProperty from \"/Users/akanksha/Documents/personalProjects/todo-application/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/akanksha/Documents/personalProjects/todo-application/client/src/pages/todopage/todopage.component.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport { Form, Input, Button, Typography, Checkbox, message } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport './todopage.styles.scss';\n\nclass TodoPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      activeBucket: null\n    };\n\n    this.handleCreate = async e => {\n      const bucketId = this.props.match.params.bucketId;\n      const value = this.state.value;\n      e.preventDefault();\n\n      if (!value) {\n        return;\n      }\n\n      const createdItem = (await axios.post('todo-items', {\n        name: value,\n        bucketId\n      })).data;\n\n      const updatedActiveBucket = _objectSpread({}, this.state.activeBucket);\n\n      updatedActiveBucket.todoItems = [createdItem].concat(updatedActiveBucket.todoItems);\n      this.setState({\n        activeBucket: updatedActiveBucket,\n        value: ''\n      });\n      message.success(\"Saved!\", 0.2);\n    };\n\n    this.toggle = async (item, index) => {\n      const updatedActiveBucket = _objectSpread({}, this.state.activeBucket);\n\n      const updateDoneValue = !item.isDone;\n      updatedActiveBucket.todoItems[index].isDone = updateDoneValue;\n      this.setState({\n        activeBucket: updatedActiveBucket\n      });\n      await axios.put(\"http://localhost:5000/api/todo-items/\".concat(item.id), {\n        isDone: updateDoneValue,\n        name: item.name\n      });\n      message.success(\"Saved!\", 0.2);\n    };\n  }\n\n  componentDidMount() {\n    this.setupActiveBucket(this.props.match.params.bucketId);\n  }\n\n  async setupActiveBucket(bucketId) {\n    const activeBucket = (await axios.get(\"buckets/\".concat(bucketId))).data;\n    activeBucket.todoItems.sort((item1, item2) => item2.id - item1.id);\n    this.setState({\n      activeBucket,\n      value: \"\"\n    });\n  }\n\n  render() {\n    const activeBucket = this.state.activeBucket;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleCreate,\n      className: \"todo-input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Input, {\n      autoFocus: true,\n      value: this.state.value,\n      onChange: e => this.setState({\n        value: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Button, {\n      htmlType: \"submit\",\n      type: \"primary\",\n      className: \"add-todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Create\")), activeBucket && activeBucket.todoItems ? activeBucket.todoItems.map((item, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: item.isDone,\n      style: {\n        paddingRight: 8\n      },\n      onClick: () => this.toggle(item, index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Typography.Text, {\n      delete: item.isDone,\n      disabled: item.isDone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, item.name))) : []);\n  }\n\n}\n\nexport default withRouter(TodoPage);","map":{"version":3,"sources":["/Users/akanksha/Documents/personalProjects/todo-application/client/src/pages/todopage/todopage.component.jsx"],"names":["React","axios","Form","Input","Button","Typography","Checkbox","message","withRouter","TodoPage","Component","state","value","activeBucket","handleCreate","e","bucketId","props","match","params","preventDefault","createdItem","post","name","data","updatedActiveBucket","todoItems","concat","setState","success","toggle","item","index","updateDoneValue","isDone","put","id","componentDidMount","setupActiveBucket","get","sort","item1","item2","render","target","map","paddingRight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Form, Input, Button, Typography, Checkbox, message } from 'antd';\nimport { withRouter } from 'react-router-dom';\n\nimport './todopage.styles.scss';\n\nclass TodoPage extends React.Component {\n  state = {\n    value: \"\",\n    activeBucket: null,\n  };\n\n  componentDidMount() {\n    this.setupActiveBucket(this.props.match.params.bucketId);\n  }\n  async setupActiveBucket(bucketId) {\n    const activeBucket = (await axios.get(`buckets/${bucketId}`)).data;\n    activeBucket.todoItems.sort((item1, item2) => item2.id - item1.id)\n    this.setState({\n      activeBucket,\n      value: \"\",\n    })\n  }\n  handleCreate = async (e) => {\n    const { bucketId } = this.props.match.params;\n    const { value } = this.state;\n    e.preventDefault();\n    if (!value) {\n      return;\n    }\n    const createdItem = (await axios.post('todo-items', {\n      name: value,\n      bucketId,\n    })).data;\n    const updatedActiveBucket = { ...this.state.activeBucket };\n    updatedActiveBucket.todoItems = [createdItem].concat(updatedActiveBucket.todoItems);\n    this.setState({\n      activeBucket: updatedActiveBucket,\n      value: ''\n    });\n    message.success(\"Saved!\", 0.2);\n  }\n  toggle = async (item, index) => {\n    const updatedActiveBucket = { ...this.state.activeBucket };\n    const updateDoneValue = !item.isDone\n    updatedActiveBucket.todoItems[index].isDone = updateDoneValue;\n    this.setState({\n      activeBucket: updatedActiveBucket,\n    });\n    await axios.put(`http://localhost:5000/api/todo-items/${item.id}`, {\n      isDone: updateDoneValue,\n      name: item.name,\n    });\n    message.success(\"Saved!\", 0.2);\n  }\n  render() {\n    const { activeBucket } = this.state;\n    return <div className='container'>\n      <Form onSubmit={this.handleCreate} className='todo-input-container'>\n        <Input autoFocus value={this.state.value} onChange={(e) => this.setState({\n          value: e.target.value,\n        })} />\n        <Button htmlType=\"submit\" type=\"primary\" className=\"add-todo\">\n          Create\n        </Button>\n      </Form>\n      {\n        activeBucket && activeBucket.todoItems ? activeBucket.todoItems.map((item, index) => (\n          <div key={index}>\n            <Checkbox checked={item.isDone} style={{\n              paddingRight: 8,\n            }} onClick={() => this.toggle(item, index)} />\n            <Typography.Text delete={item.isDone} disabled={item.isDone}>\n              {item.name}\n            </Typography.Text>\n          </div>\n        )) : []\n      }\n    </div>\n  }\n}\n\nexport default withRouter(TodoPage);"]},"metadata":{},"sourceType":"module"}